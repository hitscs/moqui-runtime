<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a 
Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-1.6.xsd"
        default-menu-title="Speed Test" begin-transaction="true">

    <actions>
        <script><![CDATA[
            import groovy.transform.CompileStatic
            import org.moqui.context.Cache
            import org.moqui.context.ExecutionContext
            import org.moqui.entity.EntityFacade
            import org.moqui.entity.EntityValue
            import org.moqui.entity.EntityCondition
            import org.moqui.entity.EntityConditionFactory
            import java.text.DecimalFormat
            import java.sql.Timestamp
            import org.slf4j.Logger
            import org.slf4j.LoggerFactory

            Logger logger = LoggerFactory.getLogger("SpeedTest")

            beginTime = System.nanoTime()

            baseCalls = baseCalls ?: '1000'
            baseCallsNum = ec.l10n.parseNumber(baseCalls, '') as int

            performanceList = runTests(baseCallsNum, context.ec)

            @CompileStatic
            List runTests(int baseCallsNum, ExecutionContext ec) {
                EntityFacade ef = ec.entity
                Timestamp nowTs = new Timestamp(System.currentTimeMillis())

                // NOTE: long sleep times (like 1000ms) do help the numbers, but still somewhat inconsistent
                long sleepTime = 10

                List performanceList = []

                // direct cache writes and reads with EC
                int calls = baseCallsNum * 2
                BigDecimal milliseconds = 0
                Cache testCache = ec.cache.getCache("test.cache")
                EntityValue testEnumValue =
                        ef.find("moqui.basic.Enumeration").condition("enumId", "_NA_").useCache(true).one()
                // to measure the cache time and not the condition creation time, create those in advance
                long startTime = System.nanoTime()
                EntityConditionFactory ecf = ef.conditionFactory


                List<EntityCondition> conditionList = new ArrayList(calls)
                for (int i = 0; i < calls; i++) {
                    conditionList.add(ecf.makeCondition("enumId", EntityCondition.EQUALS, "_NA_"))
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "create EntityCondition", entity: "moqui.basic.Enumeration",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                startTime = System.nanoTime()
                for (int i = 0; i < calls; i++) {
                    testCache.put(conditionList[i], testEnumValue)
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "direct cache writes", entity: "moqui.basic.Enumeration",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                startTime = System.nanoTime()
                for (int i = 0; i < calls; i++) {
                    testCache.get(conditionList[i])
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "direct cache reads", entity: "moqui.basic.Enumeration",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // sleep to hopefully let GC do its thing, make times more consistent
                sleep(sleepTime)

                // one PK cache
                calls = baseCallsNum
                startTime = System.nanoTime()
                for (int i = 0; i < calls; i++) {
                    ef.find("moqui.basic.Enumeration").condition("enumId", "_NA_").useCache(true).one()
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "one PK cache", entity: "moqui.basic.Enumeration",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // one PK
                calls = baseCallsNum
                startTime = System.nanoTime()
                for (int i = 0; i < calls; i++) {
                    ef.find("moqui.basic.Enumeration").condition("enumId", "_NA_").useCache(false).one()
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "one PK", entity: "moqui.basic.Enumeration",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // ========== direct CrUD tests ==========
                calls = baseCallsNum

                // sleep to hopefully let GC do its thing, make times more consistent
                sleep(sleepTime)

                // create with sequenced ID test
                startTime = System.nanoTime()
                List<EntityValue> createTestList = []
                for (int i = 0; i < calls; i++) {
                    createTestList.add(ef.makeValue("moqui.test.TestEntity")
                            .setFields([testMedium: "Medium " + i,
                                        testLong: "Long " + i, testIndicator: "Y", testDateTime: nowTs, testNumberInteger: i,
                                        testNumberDecimal: (i + 0.5)] as Map<String, Object>, true, null, null).setSequencedIdPrimary().create())
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "direct create with sequenced ID", entity: "moqui.test.TestEntity",
                                     calls: calls, milliseconds: milliseconds,
                                     msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // create with preset ID test
                startTime = System.nanoTime()
                for (int i = 0; i < calls; i++) {
                    createTestList.add(ef.makeValue("moqui.test.TestEntity")
                            .setFields([testId: ("id" + i),
                                        testMedium: "Medium " + i, testLong: "Long " + i, testIndicator: "Y", testDateTime: nowTs,
                                        testNumberInteger: i, testNumberDecimal: (i + 0.5)] as Map<String, Object>, true, null, null).create())
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "direct create with preset ID", entity: "moqui.test.TestEntity",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // sleep to hopefully let GC do its thing, make times more consistent
                sleep(sleepTime)

                // update test
                calls = createTestList.size()
                startTime = System.nanoTime()
                for (EntityValue ev in createTestList) {
                    ev.testMedium = (ev.testMedium as String) + " - Updated"
                    ev.update()
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "direct update", entity: "moqui.test.TestEntity",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // delete
                calls = createTestList.size()
                startTime = System.nanoTime()
                for (EntityValue ev in createTestList) {
                    ev.delete()
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "direct delete", entity: "moqui.test.TestEntity",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // ========== service CrUD tests ==========
                calls = baseCallsNum

                // sleep to hopefully let GC do its thing, make times more consistent
                sleep(sleepTime)

                // create with sequenced ID test
                startTime = System.nanoTime()
                List createTestIdList = []
                for (int i = 0; i < calls; i++) {
                    createTestIdList.add(ec.service.sync().name("create", "moqui.test.TestEntity").parameters([
                            testMedium: "Medium " + i, testLong: "Long " + i, testIndicator: "Y", testDateTime: nowTs,
                            testNumberInteger: i, testNumberDecimal: (i + 0.5)]).call().testId)
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "service create with sequenced ID", entity: "moqui.test.TestEntity",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // update test
                calls = createTestIdList.size()
                startTime = System.nanoTime()
                for (String id in createTestIdList) {
                    ec.service.sync().name("update", "moqui.test.TestEntity").parameters([testId: id, testMedium: "Updated Text"]).call()
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "service update", entity: "moqui.test.TestEntity",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // delete
                calls = createTestIdList.size()
                startTime = System.nanoTime()
                for (String id in createTestIdList) {
                    ec.service.sync().name("delete", "moqui.test.TestEntity").parameter("testId", id).call()
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation     : "service delete", entity: "moqui.test.TestEntity", calls: calls, milliseconds: milliseconds,
                                     msPerCall     : (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // ========== NoSQL direct CrUD tests ==========
                calls = baseCallsNum

                // sleep to hopefully let GC do its thing, make times more consistent
                sleep(sleepTime)

                // create with sequenced ID test
                startTime = System.nanoTime()
                List<EntityValue> createNoSqlTestList = []
                for (int i = 0; i < calls; i++) {
                    EntityValue ev = ef.makeValue("moqui.test.TestNoSqlEntity")
                            .setFields([testMedium: "Medium " + i,
                                        testLong: "Long " + i, testIndicator: "Y", testDateTime: nowTs, testNumberInteger: i,
                                        testNumberDecimal: (i + 0.5)] as Map<String, Object>, true, null, null).setSequencedIdPrimary().create()
                    createNoSqlTestList.add(ev)
                    // logger.warn("===== created TestNoSqlEntity value ${ev}")
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "direct create with sequenced ID", entity: "moqui.test.TestNoSqlEntity",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // create with preset ID test
                startTime = System.nanoTime()
                for (int i = 0; i < calls; i++) {
                    createNoSqlTestList.add(ef.makeValue("moqui.test.TestNoSqlEntity")
                            .setFields([testId: ("id" + i),
                                        testMedium: "Medium " + i, testLong: "Long " + i, testIndicator: "Y", testDateTime: nowTs,
                                        testNumberInteger: i, testNumberDecimal: (i + 0.5)] as Map<String, Object>, true, null, null).create())
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "direct create with preset ID", entity: "moqui.test.TestNoSqlEntity",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // sleep to hopefully let GC do its thing, make times more consistent
                sleep(sleepTime)

                // update test
                calls = createNoSqlTestList.size()
                startTime = System.nanoTime()
                for (EntityValue ev in createNoSqlTestList) {
                    ev.testMedium = (ev.testMedium as String) + " - Updated"
                    ev.update()
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "direct update", entity: "moqui.test.TestNoSqlEntity",
                                     calls: calls, milliseconds: milliseconds, msPerCall     : (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                // delete
                calls = createNoSqlTestList.size()
                startTime = System.nanoTime()
                for (EntityValue ev in createNoSqlTestList) {
                    ev.delete()
                }
                milliseconds = ((System.nanoTime() - startTime) / 1E6)
                performanceList.add([operation: "direct delete", entity: "moqui.test.TestNoSqlEntity",
                                     calls: calls, milliseconds: milliseconds, msPerCall: (milliseconds / calls),
                                     callsPerSecond: ((calls / milliseconds) * 1000)])

                return performanceList
            }
            ]]></script>
    </actions>
    <widgets>
        <form-single name="SelectBaseCalls" transition=".">
            <field name="baseCalls"><default-field><text-line size="10"/></default-field></field>
            <field name="submitButton"><default-field title="Run"><submit/></default-field></field>
            <field-layout><field-row-big><field-ref name="baseCalls"/><field-ref name="submitButton"/></field-row-big></field-layout>
        </form-single>
        <form-list name="PerformanceResults" list="performanceList">
            <field name="operation"><default-field><display/></default-field></field>
            <field name="entity"><default-field><display/></default-field></field>
            <field name="calls"><default-field><display/></default-field></field>
            <field name="milliseconds"><default-field><display format="0.000"/></default-field></field>
            <field name="msPerCall"><default-field><display format="0.000000"/></default-field></field>
            <field name="callsPerSecond"><default-field><display format="#,##0.00"/></default-field></field>
        </form-list>
        <label text="Total Time ${ec.l10n.format((System.nanoTime() - beginTime)/1E9, '0.00')}s" type="strong"/>
    </widgets>
</screen>
